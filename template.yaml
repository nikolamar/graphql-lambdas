## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  App Designer Backend

  Services for the App Designer

###################
#     GLOBALS     #
###################

Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 5
    MemorySize: 1024
    Environment:
      Variables:
        STAGE: !Ref Stage
        REGION: !Sub ${AWS::Region}
        WEBSOCKETE_API_ID: !Ref WebSocketApi
        DB_NAME: !Sub ${ProjectName}-${Stage}
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Ref DBPassword
        POOL_ID: !Ref CognitoUserPool
        CLIENT_ID: !Ref CognitoUserPoolClient
        NODE_ENV: !Ref Stage
        VERSION: !Ref Version

###################
#   PARAMETERS    #
###################

Parameters:
  Stage:
    Type: String
    Description: Stage namespace
    AllowedValues:
      - local
      - dev
      - prod

  ProjectName:
    Type: String
    Description: Project name

  HostedZoneId:
    Type: String
    Description: Domain hosted zone id

  SubDomainName:
    Type: String
    Description: Sub domain for APIs

  DomainName:
    Type: String
    Description: Main domain

  DBUser:
    Type: String
    Description: DB user

  GoogleClientId:
    Type: String
    Description: Google client id

  GoogleClientSecret:
    Type: String
    Description: Google client secret

  DBPassword:
    Type: String
    Description: DB pasword

  Version:
    Type: String
    Description: Version

###################
#    RESOURCES    #
###################

Resources:

  ###################
  #       LOGS      #
  ###################

  AccessLogs:
    Type: AWS::Logs::LogGroup

  ###################
  #     Cognito     #
  ###################

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${Stage}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 30
      UsernameConfiguration:
        CaseSensitive: true
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      EmailVerificationSubject: Confirm your email
      EmailVerificationMessage: verification code {####}
      SmsVerificationMessage: Your verification code {####}
      AdminCreateUserConfig:
        InviteMessageTemplate:
          EmailMessage: Your username is {username} and temporary password is {####}
          EmailSubject: Your temporary password
      AutoVerifiedAttributes:
        - email
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: OPTIONAL
      UsernameAttributes:
        - email
        - phone_number
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: true
          Required: true
        - AttributeDataType: String
          Name: tenant
          Mutable: true
          Required: false
        - AttributeDataType: String
          Name: roles
          Mutable: true
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${ProjectName}-client-${Stage}
      CallbackURLs:
        - http://localhost:4000
        - !Sub https://${ProjectName}.${Stage}.${DomainName}
      LogoutURLs:
        - http://localhost:4000/auth/sign-in
        - !Sub https://${ProjectName}.${Stage}.${DomainName}/auth/sign-in
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
        - profile
      SupportedIdentityProviders:
        - Google
        - COGNITO
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - email
        - custom:roles
        - custom:tenant
      WriteAttributes:
        - email
        - custom:roles
        - custom:tenant

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${ProjectName}-${Stage}
      UserPoolId: !Ref CognitoUserPool

  GoogleUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"
        picture: "picture"
        email_verified: "email_verified"
        given_name: "given_name"
        family_name: "family_name"

  ###################
  #       HTTP      #
  ###################

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.accesstoken
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
              audience:
                - !Ref CognitoUserPoolClient
      StageName: !Ref Stage
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      RouteSettings:
        "GET /hello":
          ThrottlingBurstLimit: 200
        "GET /users":
          ThrottlingBurstLimit: 200
        "POST /users":
          ThrottlingBurstLimit: 200
        "GET /tenants":
          ThrottlingBurstLimit: 200
        "POST /tenants":
          ThrottlingBurstLimit: 200
        "GET /environment":
          ThrottlingBurstLimit: 200
        "POST /environment":
          ThrottlingBurstLimit: 200
        "GET /cognito":
          ThrottlingBurstLimit: 200
        "POST /cognito":
          ThrottlingBurstLimit: 200
      StageVariables:
        StageVar: Value
      FailOnWarnings: true
      CorsConfiguration:
        AllowCredentials: True
        MaxAge: 600
        AllowOrigins:
          - http://localhost:4000
          - !Sub https://${ProjectName}.${DomainName}
          - !Sub https://${ProjectName}.${Stage}.${DomainName}
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
        MaxAge: 600
      Domain:
        DomainName: !Sub ${SubDomainName}.${DomainName}
        CertificateArn: !Ref SSLAPICert
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
        BasePath: !Sub /${Stage}
        # AllowCredentials: true

  SSLAPICert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Sub ${SubDomainName}.${DomainName}
      DomainValidationOptions:
        - DomainName: !Sub ${SubDomainName}.${DomainName}
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub ${SubDomainName}.${DomainName}

  ###################
  # HTTP FUNCTIONS  #
  ###################

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-hello-world-${Stage}
      Description: !Sub ${ProjectName} - hello world function
      CodeUri: lambdas/hello-world/
      Handler: app.handler
      Events:
        HelloWorldGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /hello
            TimeoutInMillis: 1000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 10

  UsersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
          - "@graphql-tools/*"
          - "graphql-middleware"
          - "apollo-server-core"
          - "apollo-server-lambda"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-users-${Stage}
      Description: !Sub ${ProjectName} - users function
      CodeUri: lambdas/users/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer
        - !Ref SchemasLayer
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - 'cognito-idp:AdminGetUser'
          - 'cognito-idp:AdminConfirmSignUp'
          - 'cognito-idp:AdminUpdateUserAttributes'
          - 'cognito-idp:AdminCreateUser'
          - 'cognito-idp:AdminDeleteUser'
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
          - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'
      Events:
        UsersGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /users
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 10
        UsersPostEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /users
            Auth:
              Authorizer: CognitoAuthorizer
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  TenantsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
          - "@graphql-tools/*"
          - "graphql-middleware"
          - "apollo-server-core"
          - "apollo-server-lambda"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-tenants-${Stage}
      Description: !Sub ${ProjectName} - tenants function
      CodeUri: lambdas/tenants/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer
        - !Ref SchemasLayer
      Events:
        TenantsGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /tenants
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 10
        TenantsPostEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /tenants
            Auth:
              Authorizer: CognitoAuthorizer
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  EnvironmentFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
          - "@graphql-tools/*"
          - "graphql-middleware"
          - "apollo-server-core"
          - "apollo-server-lambda"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-environment-${Stage}
      Description: !Sub ${ProjectName} - environment function
      CodeUri: lambdas/environment/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer
        - !Ref SchemasLayer
      Events:
        EnvironmentGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /environment
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 10
        EnvironmentPostEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /environment
            Auth:
              Authorizer: CognitoAuthorizer
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  CognitoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
          - "aws-sdk"
          - "@graphql-tools/*"
          - "graphql-middleware"
          - "apollo-server-core"
          - "apollo-server-lambda"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-cognito-${Stage}
      Description: !Sub ${ProjectName} - cognito function
      CodeUri: lambdas/cognito/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer
        - !Ref SchemasLayer
      Events:
        TenantsGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /cognito
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 10
        TenantsPostEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /cognito
            Auth:
              Authorizer: CognitoAuthorizer
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  ###################
  #    WEBSOCKET    #
  ###################

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${ProjectName}-web-socket-${Stage}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ###################
  # WS DEPLOYMENT  #
  ###################

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  ###################
  #    WS STAGE     #
  ###################

  WebsSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub ${Stage}
      Description: prod stage
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi

  ###################
  #    WS ROUTES    #
  ###################

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultInteg

  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

  ###################
  #  WS FUNCTIONS   #
  ###################

  ConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-connect-${Stage}
      Description: !Sub ${ProjectName} - websocket connect function
      CodeUri: lambdas/connect/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-disconnect-${Stage}
      Description: !Sub ${ProjectName} - websocket disconnect function
      CodeUri: lambdas/disconnect/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer

  DefaultFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: false
        Target: "es2020"
        Sourcemap: false
        External:
          - "/opt/*"
        EntryPoints:
        - src/app.ts
    Properties:
      FunctionName: !Sub ${ProjectName}-default-${Stage}
      Description: !Sub ${ProjectName} - websocket default function
      CodeUri: lambdas/default/
      Handler: app.handler
      Layers:
        - !Ref NodejsLayer
        - !Ref ShareLayer
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  ###################
  #      Layers     #
  ###################

  NodejsLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: !Sub ${ProjectName}-nodejs-layer-${Stage}
      Description: !Sub ${ProjectName} - nodejs layer modules
      ContentUri: layers/nodejs/
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: MIT
      RetentionPolicy: Retain

  ShareLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: !Sub ${ProjectName}-share-layer-${Stage}
      Description: !Sub ${ProjectName} - share layer
      ContentUri: layers/share/
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: MIT
      RetentionPolicy: Retain

  SchemasLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: !Sub ${ProjectName}-schemas-layer-${Stage}
      Description: !Sub ${ProjectName} - schemas layer
      ContentUri: layers/schemas/
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: MIT
      RetentionPolicy: Retain

  ###################
  #   PERMISSIONS   #
  ###################

  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com

  DefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: apigateway.amazonaws.com

  HelloWorldPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloWorldFunction
      Principal: apigateway.amazonaws.com

  UsersPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UsersFunction
      Principal: apigateway.amazonaws.com

  TenantsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TenantsFunction
      Principal: apigateway.amazonaws.com

  CognitoPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoFunction
      Principal: apigateway.amazonaws.com

  EnvironmentPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnvironmentFunction
      Principal: apigateway.amazonaws.com

###################
#     OUTPUTS     #
###################

Outputs:
  ConnectFunctionArn:
    Description: On connect function arn
    Value: !GetAtt ConnectFunction.Arn

  DisconnectFunctionArn:
    Description: On disconnect function arn
    Value: !GetAtt DisconnectFunction.Arn

  DefaultFunctionArn:
    Description: Default function arn
    Value: !GetAtt DefaultFunction.Arn

  WebSocketURI:
    Description: WSS protocol uri to connect to
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}

  WebSocketStageInfo:
    Description: WebSocket Stage Info
    Value:
      Ref: WebsSocketStage

  HttpApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Sub: https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/

  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi

  CognitoUserPoolId:
    Description: Cognito pool id
    Value:
      Ref: CognitoUserPool

  CognitoUserPoolClientKey:
    Description: Cognito client key
    Value:
      Ref: CognitoUserPoolClient

  SSLAPICertificate:
    Description: SSL Api Certificate
    Value:
      Ref: SSLAPICert

  GoogleUserPoolIdentityProviderId:
    Description: Federate sign in with Google
    Value:
      Ref: GoogleUserPoolIdentityProvider